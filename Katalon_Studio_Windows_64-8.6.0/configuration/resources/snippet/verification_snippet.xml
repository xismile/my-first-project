<?xml version="1.0" encoding="UTF-8"?>

<snippets>
<snippet>
<name>common</name>
<script>
<![CDATA[
import static org.assertj.core.api.Assertions.*

import com.kms.katalon.core.testobject.RequestObject
import com.kms.katalon.core.testobject.ResponseObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webservice.verification.WSResponseManager

import groovy.json.JsonSlurper
import internal.GlobalVariable as GlobalVariable

RequestObject request = WSResponseManager.getInstance().getCurrentRequest()

ResponseObject response = WSResponseManager.getInstance().getCurrentResponse()
]]>
</script>
</snippet>

<snippet>
<name>Get current response </name>
<script>
<![CDATA[
ResponseObject response = WSResponseManager.getInstance().getCurrentResponse()
]]>
</script>
</snippet>

<snippet>
<name>Get current request </name>
<script>
<![CDATA[
RequestObject request = WSResponseManager.getInstance().getCurrentRequest()
]]>
</script>
</snippet>

<snippet>
<name>Get a global variable</name>
<script>
<![CDATA[
GlobalVariable.variable
]]>
</script>
</snippet>

<snippet>
<name>Get a variable</name>
<script>
<![CDATA[
def variables = request.getVariables()
def variable = variables.get('yourVariableName')
]]>
</script>
</snippet>
	
<snippet>
<name>Response body: Contains string</name>
<script>
<![CDATA[
assertThat(response.getResponseText()).contains('Katalon Test Project')
]]>
</script>
</snippet>

<snippet>
<name>Response body: Convert to JSON Object </name>
<script>
<![CDATA[
def jsonSlurper = new JsonSlurper()

def jsonResponse = jsonSlurper.parseText(response.getResponseText())
]]>
</script>
</snippet>

<snippet>
<name>Response body: Is equal to a String </name>
<script>
<![CDATA[
assertThat(response.getResponseText()).isEqualTo("Katalon Test Project")
]]>
</script>
</snippet>

<snippet>
<name>Response body: JSON value check</name>
<script>
<![CDATA[
WS.verifyElementPropertyValue(response, 'issues[0].fields.project.key', 'KTP')
]]>
</script>
</snippet>

<snippet>
<name>Response headers: Content-Type header checkpoint</name>
<script>
<![CDATA[
assertThat(response.getHeaderFields().get('Content-Type').toString()).isEqualTo('[application/json;charset=UTF-8]')

assertThat(response.getHeaderFields().containsKey('Content-Type')).isTrue()
]]>
</script>
</snippet>

<snippet>
<name>Status code: Code is 200</name>
<script>
<![CDATA[
WS.verifyResponseStatusCode(response, 200)

assertThat(response.getStatusCode()).isEqualTo(200)
]]>
</script>
</snippet>

<snippet>
<name>Status code: Successfully request</name>
<script>
<![CDATA[
assertThat(response.getStatusCode()).isIn(Arrays.asList(200, 201, 202))
]]>
</script>
</snippet>

<snippet>
<name>Request body: Validate GraphQL against schema</name>
<script>
<![CDATA[
String graphQLSchema = 
'''
type Author {
  id: ID!
  firstName: String!
  lastName: String!
}

type Query {
  findAllAuthors: [Author]!
  countAuthors: Long!
}

type Mutation {
  newAuthor(firstName: String!, lastName: String!) : Author!
}

type Query {
    findAllAuthors: [Author]!
    countAuthors: Long!
    findAllBooks: [Book]!
    countBooks: Long!
}

type Mutation {
    newAuthor(id: ID!, firstName: String!, lastName: String!) : Author!
    newBook(id: ID!, title: String!, isbn: String, pageCount: Int, author: ID!) : Book!
    deleteBook(id: ID!) : Boolean
    updateBookPageCount(pageCount: Int!, id: ID!) : Book!
}
'''

boolean successful = WS.validateGraphqlRequestAgainstSchema(request, graphQLSchema)
]]>
</script>
</snippet>

<snippet>
<name>Response body: Array contains</name>
<script>
<![CDATA[
String[] arrayResponse = ["why", "hello", "there"]
String[] arrayExpect = ["there", "why", "hello"]
assertThat(arrayResponse).containsOnly("there", "hello", "why")
assertThat(arrayResponse).containsOnlyElementsOf(Arrays.asList("why", "there", "hello"))

assertThat(arrayResponse).containsExactly("why", "hello", "there")
assertThat(arrayResponse).containsExactlyElementsOf(Arrays.asList("why", "hello", "there"))

assertThat(arrayResponse).containsSequence("why", "hello")
assertThat(arrayResponse).containsSubsequence("why", "there")
assertThat(arrayResponse).containsAnyOf("why", "nothing", "new")

assertThat(arrayResponse).contains("hello", atIndex(1))
]]>
</script>
</snippet>

<snippet>
<name>Response body: Validate JSON against schema</name>
<script>
<![CDATA[
String jsonPass =
"""
{
  "\$id": "https://example.com/person.schema.json",
  "\$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Person",
  "type": "object",
  "properties": {
    "firstName": {
      "type": "string",
      "description": "The person's first name."
    },
    "lastName": {
      "type": "string",
      "description": "The person's last name."
    },
    "age": {
      "description": "Age in years which must be equal to or greater than zero.",
      "type": "integer",
      "minimum": 0
    }
  }
}
"""
boolean successful = WS.validateJsonAgainstSchema(response,jsonPass)
]]>
</script>
</snippet>

<snippet>
<name>Response body: Validate XML against schema</name>
<script>
<![CDATA[
String xmlPass =
"""<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="List">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" name="item">
          <xs:complexType>
            <xs:sequence>
              <xs:element type="xs:byte" name="id"/>
              <xs:element type="xs:string" name="username"/>
              <xs:element type="xs:short" name="password"/>
              <xs:element type="xs:string" name="gender"/>
              <xs:element type="xs:byte" name="age"/>
              <xs:element type="xs:string" name="avatar"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
"""
boolean successful = WS.validateXmlAgainstSchema(response,xmlPass)
]]>
</script>
</snippet>

</snippets>
