{"version":3,"file":"static/js/556.ea09c5e3.chunk.js","mappings":"8PAIMA,GAAYC,EAAAA,EAAAA,GAAW,CAC3BC,KAAM,CACJC,SAAU,QACVC,MAAO,OACPC,OAAQ,OACRC,IAAK,IACLC,KAAM,IACNC,WAAY,QAEdC,IAAK,CACHL,MAAO,OACPC,OAAQ,OACRG,WACE,oFAKAE,EAAY,CAChBC,MACE,2EACFC,MAAO,WACPC,MAAO,gCACPC,MAAO,OAGHC,EAAiB,SAACC,EAAMC,EAASC,GACrC,OAAQF,GACN,KAAKN,EAAUC,MACb,OACE,gBACEQ,MAAO,CAAEC,gBAAgB,OAAD,QChCTC,EDgC2BH,EC9BvC,qBADDG,EAEOC,GAEA,yBD2BqC,MAC9CC,UAAWN,EAAQR,MAGzB,KAAKC,EAAUE,MACb,OACE,kBAAOY,IAAKN,EAAI,UACd,kBACEO,SAAO,EACPC,KAAK,WACLC,QAAQ,KACRH,IAAI,kCAIZ,KAAKd,EAAUG,MACb,OACE,kBAAOW,IAAKN,EAAI,UACd,kBACEO,SAAO,EACPC,KAAK,WACLC,QAAQ,KACRH,IAAI,iCAIZ,KAAKd,EAAUI,MACb,OAAO,gBAAKU,IAAKN,EAAKU,IAAI,GAAGL,UAAWN,EAAQR,MAClD,QACE,OC7DkB,IAACY,CD+DzB,EASe,SAASQ,IACtB,IAAMZ,EAAUjB,IAGVqB,EADM,IAAIS,IAAIC,OAAOC,SAASC,MACfC,aAAaC,IAAI,OAChCC,EAZgB,WAAe,IAAdlB,EAAG,uDAAG,GACvBkB,EAAkBC,OAAOC,OAAO5B,GAAW6B,MAAK,SAACC,GAAO,OAC5DA,EAAQC,KAAKvB,EAAI,IAEnB,OAA0B,MAAnBkB,EAA0BA,EAAkB1B,EAAUC,KAC/D,CAO0B+B,CAAgBrB,GAExC,OACE,gBAAKE,UAAWN,EAAQf,KAAK,SAC1Ba,EAAeqB,EAAiBnB,EAASI,IAGhD,C","sources":["client/pages/multi-media/MultiMediaPage.jsx","client/pages/multi-media/components/ImageGetter.js"],"sourcesContent":["import React from \"react\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { getImage } from \"./components/ImageGetter\";\n\nconst useStyles = makeStyles({\n  root: {\n    position: \"fixed\",\n    width: \"100%\",\n    height: \"100%\",\n    top: \"0\",\n    left: \"0\",\n    background: \"#fff\",\n  },\n  img: {\n    width: \"100%\",\n    height: \"100%\",\n    background:\n      \"url(../../../assets/img/quick-record-web.gifz) center center/contain no-repeat\",\n  },\n});\n\n// https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types\nconst MediaType = {\n  Image:\n    /\\.(png|apng|gif|svg|webp|tif|tiff|bmp|ico|cur|avif|jpg|jpeg|jfif|pjpeg)/i,\n  Audio: /\\.(mp3)/i,\n  Video: /\\.(mp4|webm|ogv|ogm|ogg|avi)/i,\n  Embed: /.*/i,\n};\n\nconst mediaRenderers = (type, classes, url) => {\n  switch (type) {\n    case MediaType.Image:\n      return (\n        <div\n          style={{ backgroundImage: `url(${getImage(url)})` }}\n          className={classes.img}\n        />\n      );\n    case MediaType.Audio:\n      return (\n        <audio src={url}>\n          <track\n            default\n            kind=\"captions\"\n            srcLang=\"en\"\n            src=\"/media/examples/friday.vttz\"\n          />\n        </audio>\n      );\n    case MediaType.Video:\n      return (\n        <video src={url}>\n          <track\n            default\n            kind=\"captions\"\n            srcLang=\"en\"\n            src=\"/media/examples/friday.vtt\"\n          />\n        </video>\n      );\n    case MediaType.Embed:\n      return <img src={url} alt=\"\" className={classes.img} />;\n    default:\n      return;\n  }\n};\n\nconst detectMediaType = (url = \"\") => {\n  const detectedPattern = Object.values(MediaType).find((pattern) =>\n    pattern.test(url)\n  );\n  return detectedPattern != null ? detectedPattern : MediaType.Image;\n};\n\nexport default function MultiMediaPage() {\n  const classes = useStyles();\n\n  const url = new URL(window.location.href);\n  const mediaUrl = url.searchParams.get(\"url\");\n  const detectedPattern = detectMediaType(mediaUrl);\n\n  return (\n    <div className={classes.root}>\n      {mediaRenderers(detectedPattern, classes, mediaUrl)}\n    </div>\n  );\n}\n","\nimport WebRecorderGif from '../../../../assets/img/web-recorder.gif';\n\nexport const getImage = (mediaUrl) => {\n    switch (mediaUrl) {\n        case 'web-recorder.gif':\n            return WebRecorderGif;\n        default:\n            return <></>\n    }\n\n}"],"names":["useStyles","makeStyles","root","position","width","height","top","left","background","img","MediaType","Image","Audio","Video","Embed","mediaRenderers","type","classes","url","style","backgroundImage","mediaUrl","WebRecorderGif","className","src","default","kind","srcLang","alt","MultiMediaPage","URL","window","location","href","searchParams","get","detectedPattern","Object","values","find","pattern","test","detectMediaType"],"sourceRoot":""}